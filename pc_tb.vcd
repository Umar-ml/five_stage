$date
	Mon Mar 10 14:16:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module pc_tb $end
$var wire 1 ! stall $end
$var wire 1 " xorrr $end
$var wire 1 # xorr $end
$var wire 1 $ xori $end
$var wire 1 % wenb $end
$var wire 1 & sw $end
$var wire 1 ' sub $end
$var wire 1 ( srlr $end
$var wire 1 ) srli $end
$var wire 1 * srl $end
$var wire 1 + srar $end
$var wire 1 , srai $end
$var wire 1 - sra $end
$var wire 1 . sltur $end
$var wire 1 / sltui $end
$var wire 1 0 sltu $end
$var wire 1 1 sltr $end
$var wire 1 2 slti $end
$var wire 1 3 slt $end
$var wire 1 4 sllr $end
$var wire 1 5 slli $end
$var wire 1 6 sll $end
$var wire 1 7 sh $end
$var wire 2 8 sel_bit_mux [1:0] $end
$var wire 4 9 sel_bit [3:0] $end
$var wire 1 : sb $end
$var wire 1 ; rs2_imm_sel $end
$var wire 5 < rs2 [4:0] $end
$var wire 32 = rs1_plus_imm [31:0] $end
$var wire 5 > rs1 [4:0] $end
$var wire 32 ? read_data [31:0] $end
$var wire 5 @ rdi [4:0] $end
$var wire 1 A priority_out $end
$var wire 32 B pc_plus4 [31:0] $end
$var wire 32 C pc_imm [31:0] $end
$var wire 32 D pc_from_if [31:0] $end
$var wire 32 E outputt [31:0] $end
$var wire 32 F outdata_store [31:0] $end
$var wire 3 G out_for [2:0] $end
$var wire 32 H out_1 [31:0] $end
$var wire 1 I out3 $end
$var wire 1 J out2 $end
$var wire 1 K out1 $end
$var wire 1 L out0 $end
$var wire 1 M orrr $end
$var wire 1 N orr $end
$var wire 1 O ori $end
$var wire 1 P lw $end
$var wire 1 Q lui_enb $end
$var wire 1 R load_enb $end
$var wire 1 S lhu $end
$var wire 1 T lh $end
$var wire 1 U lbu $end
$var wire 1 V lb $end
$var wire 1 W jalreverse $end
$var wire 1 X jalr $end
$var wire 1 Y jal_enb $end
$var wire 1 Z jal $end
$var wire 32 [ instruction_from_if [31:0] $end
$var wire 1 \ in_to_pr $end
$var wire 32 ] immm [31:0] $end
$var wire 32 ^ dataB [31:0] $end
$var wire 32 _ dataA [31:0] $end
$var wire 1 ` branch_taken $end
$var wire 1 a branch_enb $end
$var wire 1 b bne $end
$var wire 1 c bltu $end
$var wire 1 d blt $end
$var wire 1 e bgeu $end
$var wire 1 f bge $end
$var wire 1 g beq $end
$var wire 1 h auipc_wenb $end
$var wire 1 i andr $end
$var wire 1 j andi $end
$var wire 1 k andd $end
$var wire 32 l alu_out [31:0] $end
$var wire 1 m addwith $end
$var wire 1 n addr $end
$var wire 1 o addi $end
$var wire 1 p add $end
$var reg 1 q clk $end
$var reg 1 r enable $end
$var reg 1 s rst $end
$scope module adderr $end
$var wire 32 t pc_plus_imm_for_auipc [31:0] $end
$var wire 32 u pc_for_auipc [31:0] $end
$var wire 32 v imm_for_btype [31:0] $end
$upscope $end
$scope module aluu $end
$var wire 4 w selector [3:0] $end
$var wire 32 x dataB [31:0] $end
$var wire 32 y dataA [31:0] $end
$var reg 1 ` branch_taken $end
$var reg 32 z out [31:0] $end
$upscope $end
$scope module cuu $end
$var wire 1 p add $end
$var wire 1 o addi $end
$var wire 1 n addr $end
$var wire 1 m addwith $end
$var wire 1 k andd $end
$var wire 1 j andi $end
$var wire 1 i andr $end
$var wire 1 h auipc_wenb $end
$var wire 1 g beq $end
$var wire 1 f bge $end
$var wire 1 e bgeu $end
$var wire 1 d blt $end
$var wire 1 c bltu $end
$var wire 1 b bne $end
$var wire 1 a branch_enb $end
$var wire 1 \ in_to_pr $end
$var wire 1 Z jal $end
$var wire 1 Y jal_enb $end
$var wire 1 X jalr $end
$var wire 1 W jalreverse $end
$var wire 1 V lb $end
$var wire 1 U lbu $end
$var wire 1 T lh $end
$var wire 1 S lhu $end
$var wire 1 R load_enb $end
$var wire 1 Q lui_enb $end
$var wire 1 P lw $end
$var wire 1 O ori $end
$var wire 1 N orr $end
$var wire 1 M orrr $end
$var wire 1 L out0 $end
$var wire 1 K out1 $end
$var wire 1 J out2 $end
$var wire 1 I out3 $end
$var wire 1 ; rs2_imm_sel $end
$var wire 1 : sb $end
$var wire 1 7 sh $end
$var wire 1 6 sll $end
$var wire 1 5 slli $end
$var wire 1 4 sllr $end
$var wire 1 3 slt $end
$var wire 1 2 slti $end
$var wire 1 1 sltr $end
$var wire 1 0 sltu $end
$var wire 1 / sltui $end
$var wire 1 . sltur $end
$var wire 1 - sra $end
$var wire 1 , srai $end
$var wire 1 + srar $end
$var wire 1 * srl $end
$var wire 1 ) srli $end
$var wire 1 ( srlr $end
$var wire 1 ' sub $end
$var wire 1 & sw $end
$var wire 1 % wenb $end
$var wire 1 $ xori $end
$var wire 1 # xorr $end
$var wire 1 " xorrr $end
$var wire 1 { i8 $end
$var wire 1 | i7 $end
$var wire 1 } i6 $end
$var wire 1 ~ i5 $end
$var wire 1 !" i4 $end
$var wire 1 "" i3 $end
$var wire 1 #" i2 $end
$var wire 1 $" i1 $end
$var wire 1 %" i0 $end
$var wire 32 &" data_in [31:0] $end
$var reg 4 '" sel_bit [3:0] $end
$var reg 2 (" sel_bit_mux [1:0] $end
$upscope $end
$scope module decc $end
$var wire 5 )" rs2 [4:0] $end
$var wire 5 *" rs1 [4:0] $end
$var wire 5 +" rdi [4:0] $end
$var wire 32 ," data_in [31:0] $end
$upscope $end
$scope module dmeme $end
$var wire 32 -" address [31:0] $end
$var wire 1 q clk $end
$var wire 1 V lb $end
$var wire 1 U lbu $end
$var wire 1 T lh $end
$var wire 1 S lhu $end
$var wire 1 R load_enb $end
$var wire 1 P lw $end
$var wire 1 : sb $end
$var wire 1 7 sh $end
$var wire 1 & sw $end
$var wire 32 ." write_data [31:0] $end
$var reg 32 /" read_data [31:0] $end
$upscope $end
$scope module if_id $end
$var wire 1 q clk $end
$var wire 1 0" flush $end
$var wire 1 1" reset $end
$var wire 1 ! stall $end
$var wire 32 2" pc_in [31:0] $end
$var wire 32 3" instr_in [31:0] $end
$var reg 32 4" instr_out [31:0] $end
$var reg 32 5" pc_out [31:0] $end
$upscope $end
$scope module imm $end
$var wire 32 6" instruction [31:0] $end
$var wire 7 7" opcode [6:0] $end
$var reg 32 8" imm [31:0] $end
$var reg 1 A priority_out $end
$upscope $end
$scope module mux8 $end
$var wire 32 9" alu_result [31:0] $end
$var wire 32 :" imm_for_b_type [31:0] $end
$var wire 32 ;" load_result [31:0] $end
$var wire 32 <" pc_plus_imm [31:0] $end
$var wire 3 =" sel [2:0] $end
$var wire 32 >" pc_plus_4 [31:0] $end
$var reg 32 ?" out [31:0] $end
$upscope $end
$scope module muxx $end
$var wire 4 @" sel_bit [3:0] $end
$var wire 32 A" rs2 [31:0] $end
$var reg 32 B" output_data_forstore [31:0] $end
$upscope $end
$scope module mx2 $end
$var wire 32 C" imm_input [31:0] $end
$var wire 1 ; select $end
$var wire 32 D" reg_input [31:0] $end
$var wire 32 E" out [31:0] $end
$upscope $end
$scope module pc_4 $end
$var wire 32 F" pc_plus4 [31:0] $end
$var wire 32 G" pc [31:0] $end
$upscope $end
$scope module pr_tomux $end
$var wire 1 H" alu_result $end
$var wire 1 ` enable_for_auipc $end
$var wire 1 Y jal_enb $end
$var wire 1 R load_enable $end
$var wire 1 Q lui_enable $end
$var wire 5 I" input_concat [4:0] $end
$var reg 3 J" sel [2:0] $end
$upscope $end
$scope module regg $end
$var wire 1 q clk $end
$var wire 32 K" data_in [31:0] $end
$var wire 1 r enable $end
$var wire 5 L" rd_select [4:0] $end
$var wire 1 s reset $end
$var wire 5 M" rs1 [4:0] $end
$var wire 5 N" rs2 [4:0] $end
$var reg 32 O" data_out1 [31:0] $end
$var reg 32 P" data_out2 [31:0] $end
$var integer 32 Q" i [31:0] $end
$upscope $end
$scope module rs_imm $end
$var wire 32 R" imm_input [31:0] $end
$var wire 32 S" rs1 [31:0] $end
$var reg 32 T" rs1_plus_im [31:0] $end
$upscope $end
$scope module uut $end
$var wire 1 q clk $end
$var wire 32 U" pc_plus_4 [31:0] $end
$var wire 32 V" pc_plus_imm [31:0] $end
$var wire 32 W" pc_plus_imm_2 [31:0] $end
$var wire 32 X" rs1_plus_imm [31:0] $end
$var wire 1 s rst $end
$var wire 2 Y" sel_bit_mux [1:0] $end
$var wire 32 Z" pc_next [31:0] $end
$var wire 32 [" pc [31:0] $end
$var wire 32 \" instruction [31:0] $end
$scope module IM $end
$var wire 32 ]" instruction [31:0] $end
$var wire 32 ^" addr [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 q clk $end
$var wire 1 _" pc_write $end
$var wire 1 s rst $end
$var wire 32 `" pc_next [31:0] $end
$var reg 32 a" pc_out [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 32 b" pc_plus_4 [31:0] $end
$var wire 32 c" pc_plus_imm [31:0] $end
$var wire 32 d" pc_plus_imm_2 [31:0] $end
$var wire 32 e" rs1_plus_imm_for_jalr [31:0] $end
$var wire 2 f" sel [1:0] $end
$var reg 32 g" out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 g"
b0 f"
bx e"
bx d"
bx c"
b100 b"
b0 a"
b100 `"
1_"
b0 ^"
b101000000000000010010011 ]"
b101000000000000010010011 \"
b0 ["
b100 Z"
b0 Y"
bx X"
bx W"
bx V"
b100 U"
bx T"
bx S"
bx R"
b100000 Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
b0 J"
b1 I"
1H"
b0 G"
b100 F"
bx E"
bx D"
bx C"
bx B"
bx A"
b0 @"
bx ?"
b0 >"
b0 ="
bx <"
b0 ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
b101000000000000010010011 3"
b0 2"
01"
z0"
b0 /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
b0 ("
b0 '"
b101000000000000010010011 &"
0%"
0$"
1#"
0""
0!"
0~
0}
0|
0{
bx z
bx y
bx x
b0 w
bx v
b0 u
bx t
1s
0r
0q
1p
1o
0n
0m
bx l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
bx _
bx ^
bx ]
1\
bx [
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
bx H
b0 G
bx F
bx E
bx D
bx C
b100 B
xA
bx @
b0 ?
bx >
bx =
bx <
1;
0:
b0 9
b0 8
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
1%
0$
0#
0"
z!
$end
#5
b100000 Q"
1q
#10
b0 E
b0 ?"
b0 K"
b0 F
b0 B"
b100 =
b100 T"
b100 X"
b100 e"
b0 l
b0 z
b0 -"
b0 9"
b0 ^
b0 ."
b0 A"
b0 D"
b0 P"
b0 _
b0 y
b0 O"
b0 S"
b0 H
b0 x
b0 E"
b0 7"
b0 <
b0 )"
b0 N"
b0 >
b0 *"
b0 M"
b0 @
b0 +"
b0 L"
0A
b0 C
b0 t
b0 <"
b0 V"
b0 W"
b0 c"
b0 d"
b0 ]
b0 v
b0 8"
b0 :"
b0 C"
b0 R"
b0 D
b0 5"
b0 [
b0 ,"
b0 4"
b0 6"
0q
11"
0s
#15
x;
x%
x\
xY
bx 9
bx w
bx '"
bx @"
xa
xL
xK
xJ
x:
x7
x&
xX
xW
xZ
xI
xe
xc
xf
xd
xb
xg
xR
xS
xT
xH"
xi
x+
x(
x.
x4
xU
xP
x-
x*
xN
x1
x#
x,
x)
x0
x3
x6
xp
xk
xM
x"
x'
xV
x/
x2
x5
xo
xn
xj
xO
x$
xh
bx0xxx I"
xQ
xm
x{
x|
x}
x~
x!"
x""
x#"
x$"
x%"
bx &"
bx 3"
bx \"
bx ]"
b1000 Z"
b1000 `"
b1000 g"
b1000 B
b1000 F"
b1000 U"
b1000 b"
b100 C
b100 t
b100 <"
b100 V"
b100 W"
b100 c"
b100 d"
b100 u
b100 2"
b100 >"
b100 G"
b100 ["
b100 ^"
b100 a"
1q
1r
#20
0q
#25
b1100 Z"
b1100 `"
b1100 g"
b1100 B
b1100 F"
b1100 U"
b1100 b"
b1000 C
b1000 t
b1000 <"
b1000 V"
b1000 W"
b1000 c"
b1000 d"
b1000 u
b1000 2"
b1000 >"
b1000 G"
b1000 ["
b1000 ^"
b1000 a"
1q
#30
0q
#35
b10000 Z"
b10000 `"
b10000 g"
b10000 B
b10000 F"
b10000 U"
b10000 b"
b1100 C
b1100 t
b1100 <"
b1100 V"
b1100 W"
b1100 c"
b1100 d"
b1100 u
b1100 2"
b1100 >"
b1100 G"
b1100 ["
b1100 ^"
b1100 a"
1q
#40
0q
#45
b10100 Z"
b10100 `"
b10100 g"
b10100 B
b10100 F"
b10100 U"
b10100 b"
b10000 C
b10000 t
b10000 <"
b10000 V"
b10000 W"
b10000 c"
b10000 d"
b10000 u
b10000 2"
b10000 >"
b10000 G"
b10000 ["
b10000 ^"
b10000 a"
1q
#50
0q
#55
b11000 Z"
b11000 `"
b11000 g"
b11000 B
b11000 F"
b11000 U"
b11000 b"
b10100 C
b10100 t
b10100 <"
b10100 V"
b10100 W"
b10100 c"
b10100 d"
b10100 u
b10100 2"
b10100 >"
b10100 G"
b10100 ["
b10100 ^"
b10100 a"
1q
#60
0q
#65
b11100 Z"
b11100 `"
b11100 g"
b11100 B
b11100 F"
b11100 U"
b11100 b"
b11000 C
b11000 t
b11000 <"
b11000 V"
b11000 W"
b11000 c"
b11000 d"
b11000 u
b11000 2"
b11000 >"
b11000 G"
b11000 ["
b11000 ^"
b11000 a"
1q
#70
0q
#75
b100000 Z"
b100000 `"
b100000 g"
b100000 B
b100000 F"
b100000 U"
b100000 b"
b11100 C
b11100 t
b11100 <"
b11100 V"
b11100 W"
b11100 c"
b11100 d"
b11100 u
b11100 2"
b11100 >"
b11100 G"
b11100 ["
b11100 ^"
b11100 a"
1q
#80
0q
#85
b100100 Z"
b100100 `"
b100100 g"
b100100 B
b100100 F"
b100100 U"
b100100 b"
b100000 C
b100000 t
b100000 <"
b100000 V"
b100000 W"
b100000 c"
b100000 d"
b100000 u
b100000 2"
b100000 >"
b100000 G"
b100000 ["
b100000 ^"
b100000 a"
1q
#90
0q
#95
b101000 Z"
b101000 `"
b101000 g"
b101000 B
b101000 F"
b101000 U"
b101000 b"
b100100 C
b100100 t
b100100 <"
b100100 V"
b100100 W"
b100100 c"
b100100 d"
b100100 u
b100100 2"
b100100 >"
b100100 G"
b100100 ["
b100100 ^"
b100100 a"
1q
#100
0q
#105
b101100 Z"
b101100 `"
b101100 g"
b101100 B
b101100 F"
b101100 U"
b101100 b"
b101000 C
b101000 t
b101000 <"
b101000 V"
b101000 W"
b101000 c"
b101000 d"
b101000 u
b101000 2"
b101000 >"
b101000 G"
b101000 ["
b101000 ^"
b101000 a"
1q
#110
0q
#115
b110000 Z"
b110000 `"
b110000 g"
b110000 B
b110000 F"
b110000 U"
b110000 b"
b101100 C
b101100 t
b101100 <"
b101100 V"
b101100 W"
b101100 c"
b101100 d"
b101100 u
b101100 2"
b101100 >"
b101100 G"
b101100 ["
b101100 ^"
b101100 a"
1q
